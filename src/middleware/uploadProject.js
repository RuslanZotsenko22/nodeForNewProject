import multer from 'multer';
import { projectStorage } from '../config/cloudinaryProjects.js';
import { v2 as cloudinary } from 'cloudinary';

export const uploadProjectImage = multer({
  storage: projectStorage,
  limits: { fileSize: 5 * 1024 * 1024 }, // 5 MB –æ–±–º–µ–∂–µ–Ω–Ω—è
  fileFilter: (req, file, cb) => {
    const allowedTypes = ['image/jpeg', 'image/png', 'image/webp'];
    if (allowedTypes.includes(file.mimetype)) {
      cb(null, true);
    } else {
      cb(new Error('–ù–µ–ø—Ä–∏–ø—É—Å—Ç–∏–º–∏–π —Ç–∏–ø —Ñ–∞–π–ª—É. –î–æ–∑–≤–æ–ª–µ–Ω–æ: JPEG, PNG, WEBP'));
    }
  },
});

// ‚öôÔ∏è Middleware –¥–ª—è –æ–±—Ä–æ–±–∫–∏ —Ñ–æ—Ç–æ (URL –∞–±–æ —Ñ–∞–π–ª)
export const handleProjectPhotoInput = (req, res, next) => {
  if (req.body.imageUrl) {
    req.photoSource = 'url';
  } else if (req.file && req.file.path) {
    req.photoSource = 'file';
    req.body.cloudinaryUrl = req.file.path;
    req.body.cloudinaryPublicId = req.file.filename;
  } else {
    return res
      .status(400)
      .json({ message: '–ù–µ–æ–±—Ö—ñ–¥–Ω–æ –Ω–∞–¥–∞—Ç–∏ imageUrl –∞–±–æ —Ñ–æ—Ç–æ—Ñ–∞–π–ª.' });
  }
  next();
};

// üóë –í–∏–¥–∞–ª–µ–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑ Cloudinary –∑–∞ –ø—É–±–ª—ñ—á–Ω–∏–º ID
export const deleteProjectImage = async (publicId) => {
  try {
    const result = await cloudinary.uploader.destroy(publicId);
    if (result.result !== 'ok') {
      console.warn('‚ö†Ô∏è Cloudinary: –ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è –Ω–µ –≤–∏–¥–∞–ª–µ–Ω–æ –∞–±–æ –≤–∂–µ –Ω–µ —ñ—Å–Ω—É—î.');
    }
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑ Cloudinary:', error);
  }
};

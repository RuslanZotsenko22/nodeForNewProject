import express from 'express';
import TeamMember from '../models/teamMemberModel.js';
import {
  upload,
  handlePhotoInput,
  deleteCloudinaryImage,
} from '../middleware/upload.js';

const router = express.Router();

// ‚ûï –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–æ–≥–æ —É—á–∞—Å–Ω–∏–∫–∞
router.post(
  '/team',
  upload.single('image'),
  handlePhotoInput,
  async (req, res) => {
    const {
      name,
      position,
      photoUrl,
      cloudinaryPublicId,
      facebook,
      instagram,
      linkedin,
      twitter,
    } = req.body;

    if (!name || !position) {
      return res.status(400).json({ message: '–í—Å—ñ –ø–æ–ª—è –æ–±–æ–≤‚Äô—è–∑–∫–æ–≤—ñ' });
    }

    try {
      const newMember = new TeamMember({
        name,
        position,
        photoUrl: req.photoSource === 'url' ? photoUrl : req.body.cloudinaryUrl,
        cloudinaryPublicId:
          req.photoSource === 'file' ? cloudinaryPublicId : undefined,
        socialLinks: {
          facebook: facebook || '',
          instagram: instagram || '',
          linkedin: linkedin || '',
          twitter: twitter || '',
        },
      });

      await newMember.save();
      res
        .status(201)
        .json({ message: '–£—á–∞—Å–Ω–∏–∫–∞ –¥–æ–¥–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ!', member: newMember });
    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ —á–ª–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∏:', error);
      res.status(500).json({ message: '–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫!' });
    }
  },
);

// üì§ –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ—Ö —É—á–∞—Å–Ω–∏–∫—ñ–≤
router.get('/team', async (req, res) => {
  try {
    const members = await TeamMember.find().sort({ createdAt: -1 });
    res.status(200).json(members);
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —á–ª–µ–Ω—ñ–≤ –∫–æ–º–∞–Ω–¥–∏:', error);
    res.status(500).json({ message: '–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–∞–Ω—ñ' });
  }
});

// ‚úèÔ∏è –û–Ω–æ–≤–∏—Ç–∏ —É—á–∞—Å–Ω–∏–∫–∞
router.put(
  '/team/:id',
  upload.single('image'),
  handlePhotoInput,
  async (req, res) => {
    const { id } = req.params;
    const {
      name,
      position,
      photoUrl,
      cloudinaryPublicId,
      facebook,
      instagram,
      linkedin,
      twitter,
    } = req.body;

    if (!name || !position) {
      return res.status(400).json({ message: '–í—Å—ñ –ø–æ–ª—è –æ–±–æ–≤‚Äô—è–∑–∫–æ–≤—ñ' });
    }

    try {
      const existingMember = await TeamMember.findById(id);
      if (!existingMember) {
        return res.status(404).json({ message: '–£—á–∞—Å–Ω–∏–∫–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ' });
      }

      const updatedData = {
        name,
        position,
        socialLinks: {
          facebook: facebook || existingMember.socialLinks?.facebook || '',
          instagram: instagram || existingMember.socialLinks?.instagram || '',
          linkedin: linkedin || existingMember.socialLinks?.linkedin || '',
          twitter: twitter || existingMember.socialLinks?.twitter || '',
        },
      };

      if (req.photoSource === 'url') {
        updatedData.photoUrl = photoUrl;
        updatedData.cloudinaryPublicId = undefined;
      } else if (req.photoSource === 'file') {
        if (existingMember.cloudinaryPublicId) {
          await deleteCloudinaryImage(existingMember.cloudinaryPublicId);
        }
        updatedData.photoUrl = req.body.cloudinaryUrl;
        updatedData.cloudinaryPublicId = cloudinaryPublicId;
      }

      const updatedMember = await TeamMember.findByIdAndUpdate(
        id,
        updatedData,
        {
          new: true,
          runValidators: true,
        },
      );

      res
        .status(200)
        .json({ message: '–£—á–∞—Å–Ω–∏–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!', member: updatedMember });
    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ —á–ª–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∏:', error);
      res.status(500).json({ message: '–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ –¥–∞–Ω—ñ' });
    }
  },
);

// ‚ùå –í–∏–¥–∞–ª–∏—Ç–∏ —É—á–∞—Å–Ω–∏–∫–∞
router.delete('/team/:id', async (req, res) => {
  const { id } = req.params;

  try {
    const deleted = await TeamMember.findByIdAndDelete(id);
    if (!deleted) {
      return res.status(404).json({ message: '–£—á–∞—Å–Ω–∏–∫–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ' });
    }

    if (deleted.cloudinaryPublicId) {
      await deleteCloudinaryImage(deleted.cloudinaryPublicId);
    }

    res.status(200).json({ message: '–£—á–∞—Å–Ω–∏–∫–∞ —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ' });
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ —á–ª–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∏:', error);
    res.status(500).json({ message: '–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –∑–∞–ø–∏—Å' });
  }
});

export default router;

import express from 'express';
import Project from '../models/projectModel.js';
import {
  uploadProjectImage,
  handleProjectPhotoInput,
  deleteProjectImage,
} from '../middleware/uploadProject.js';
import { verifyAdminToken } from '../middleware/verifyAdmin.js'; // ‚úÖ –¥–æ–¥–∞–Ω–æ

const router = express.Router();

// üì§ –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ –ø—Ä–æ—î–∫—Ç–∏ ‚Äî –ü–£–ë–õ–Ü–ß–ù–û
router.get('/', async (req, res) => {
  try {
    const projects = await Project.find().sort({ createdAt: -1 });
    res.status(200).json(projects);
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –ø—Ä–æ—î–∫—Ç—ñ–≤:', error);
    res.status(500).json({ message: '–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –ø—Ä–æ—î–∫—Ç–∏' });
  }
});

// üõ° –ó–∞—Ö–∏—Å—Ç —É—Å—ñ—Ö –º–∞—Ä—à—Ä—É—Ç—ñ–≤ –Ω–∏–∂—á–µ
router.use(verifyAdminToken);

// ‚ûï –î–æ–¥–∞—Ç–∏ –ø—Ä–æ—î–∫—Ç
router.post(
  '/',
  uploadProjectImage.single('image'),
  handleProjectPhotoInput,
  async (req, res) => {
    const { title, category, description, imageUrl } = req.body;

    if (!title || !category || !description) {
      return res.status(400).json({ message: '–í—Å—ñ –ø–æ–ª—è –æ–±–æ–≤‚Äô—è–∑–∫–æ–≤—ñ' });
    }

    try {
      const newProject = new Project({
        title,
        category,
        description,
        imageUrl: req.photoSource === 'url' ? imageUrl : req.body.cloudinaryUrl,
        cloudinaryPublicId:
          req.photoSource === 'file' ? req.body.cloudinaryPublicId : undefined,
      });

      await newProject.save();
      res
        .status(201)
        .json({ message: '–ü—Ä–æ—î–∫—Ç –¥–æ–¥–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ!', project: newProject });
    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –ø—Ä–æ—î–∫—Ç—É:', error);
      res.status(500).json({ message: '–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫!' });
    }
  },
);

// ‚úèÔ∏è –û–Ω–æ–≤–∏—Ç–∏ –ø—Ä–æ—î–∫—Ç
router.put(
  '/:id',
  uploadProjectImage.single('image'),
  handleProjectPhotoInput,
  async (req, res) => {
    const { id } = req.params;
    const { title, category, description, imageUrl, cloudinaryPublicId } =
      req.body;

    if (!title || !category || !description) {
      return res.status(400).json({ message: '–í—Å—ñ –ø–æ–ª—è –æ–±–æ–≤‚Äô—è–∑–∫–æ–≤—ñ' });
    }

    try {
      const existingProject = await Project.findById(id);
      if (!existingProject)
        return res.status(404).json({ message: '–ü—Ä–æ—î–∫—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ' });

      const updatedData = { title, category, description };

      if (req.photoSource === 'url') {
        updatedData.imageUrl = imageUrl;
        updatedData.cloudinaryPublicId = undefined;
      } else if (req.photoSource === 'file') {
        if (existingProject.cloudinaryPublicId) {
          await deleteProjectImage(existingProject.cloudinaryPublicId);
        }
        updatedData.imageUrl = req.body.cloudinaryUrl;
        updatedData.cloudinaryPublicId = cloudinaryPublicId;
      }

      const updated = await Project.findByIdAndUpdate(id, updatedData, {
        new: true,
        runValidators: true,
      });

      res
        .status(200)
        .json({ message: '–ü—Ä–æ—î–∫—Ç –æ–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!', project: updated });
    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –ø—Ä–æ—î–∫—Ç—É:', error);
      res.status(500).json({ message: '–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ –ø—Ä–æ—î–∫—Ç' });
    }
  },
);

// ‚ùå –í–∏–¥–∞–ª–∏—Ç–∏ –ø—Ä–æ—î–∫—Ç
router.delete('/:id', async (req, res) => {
  const { id } = req.params;

  try {
    const deleted = await Project.findByIdAndDelete(id);
    if (!deleted)
      return res.status(404).json({ message: '–ü—Ä–æ—î–∫—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ' });

    if (deleted.cloudinaryPublicId) {
      await deleteProjectImage(deleted.cloudinaryPublicId);
    }

    res.status(200).json({ message: '–ü—Ä–æ—î–∫—Ç —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ' });
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –ø—Ä–æ—î–∫—Ç—É:', error);
    res.status(500).json({ message: '–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –ø—Ä–æ—î–∫—Ç' });
  }
});

export default router;

import jwt from 'jsonwebtoken';
import dotenv from 'dotenv';

dotenv.config();

// üîê –°—Ç–≤–æ—Ä–µ–Ω–Ω—è access —Ç–æ–∫–µ–Ω–∞
const generateAccessToken = (adminId) => {
  return jwt.sign({ adminId }, process.env.ACCESS_SECRET, {
    expiresIn: process.env.ACCESS_EXPIRES || '15m',
  });
};

// ‚ôªÔ∏è –°—Ç–≤–æ—Ä–µ–Ω–Ω—è refresh —Ç–æ–∫–µ–Ω–∞
const generateRefreshToken = (adminId) => {
  return jwt.sign({ adminId }, process.env.REFRESH_SECRET, {
    expiresIn: process.env.REFRESH_EXPIRES || '7d',
  });
};

// üîë POST /api/admin/login
export const login = (req, res) => {
  const { password } = req.body;

  if (!password) {
    return res.status(400).json({ message: '–í–≤–µ–¥—ñ—Ç—å –ø–∞—Ä–æ–ª—å' });
  }

  if (password !== process.env.ADMIN_PANEL_PASSWORD) {
    return res.status(401).json({ message: '–ù–µ–≤—ñ—Ä–Ω–∏–π –ø–∞—Ä–æ–ª—å' });
  }

  const adminId = process.env.ADMIN_ID || 'admin'; // –∞–±–æ –∑ –±–∞–∑–∏, –∞–±–æ —Å—Ç–∞—Ç–∏—á–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è
  const accessToken = generateAccessToken(adminId);
  const refreshToken = generateRefreshToken(adminId);

  // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ refresh —Ç–æ–∫–µ–Ω –≤ HttpOnly cookie
  res.cookie('refreshToken', refreshToken, {
    httpOnly: true,
    secure: true,
    sameSite: 'None', // —è–∫—â–æ —Ñ—Ä–æ–Ω—Ç —ñ –±–µ–∫ –Ω–∞ —Ä—ñ–∑–Ω–∏—Ö –¥–æ–º–µ–Ω–∞—Ö
    maxAge: 7 * 24 * 60 * 60 * 1000, // 7 –¥–Ω—ñ–≤
  });

  res.status(200).json({ token: accessToken });
};

// üîÅ POST /api/admin/refresh
export const refreshToken = (req, res) => {
  const tokenFromCookie = req.cookies.refreshToken;

  if (!tokenFromCookie) {
    return res.status(401).json({ message: 'Refresh —Ç–æ–∫–µ–Ω –≤—ñ–¥—Å—É—Ç–Ω—ñ–π' });
  }

  try {
    const decoded = jwt.verify(tokenFromCookie, process.env.REFRESH_SECRET);
    const newAccessToken = generateAccessToken(decoded.adminId);

    res.status(200).json({ token: newAccessToken });
  } catch (error) {
    res
      .status(403)
      .json({ message: '–ù–µ–≤—ñ—Ä–Ω–∏–π –∞–±–æ –ø—Ä–æ—Ç–µ—Ä–º—ñ–Ω–æ–≤–∞–Ω–∏–π refresh —Ç–æ–∫–µ–Ω' });
  }
};

// üîê GET /api/admin/protected
export const getProtectedData = (req, res) => {
  const authHeader = req.headers.authorization;
  const token = authHeader?.split(' ')[1];

  if (!token) return res.status(401).json({ message: '–¢–æ–∫–µ–Ω –≤—ñ–¥—Å—É—Ç–Ω—ñ–π' });

  try {
    const decoded = jwt.verify(token, process.env.ACCESS_SECRET);
    res
      .status(200)
      .json({ message: '–î–æ—Å—Ç—É–ø –¥–æ–∑–≤–æ–ª–µ–Ω–æ', adminId: decoded.adminId });
  } catch (error) {
    res.status(401).json({ message: '–ù–µ–≤—ñ—Ä–Ω–∏–π –∞–±–æ –ø—Ä–æ—Ç–µ—Ä–º—ñ–Ω–æ–≤–∞–Ω–∏–π —Ç–æ–∫–µ–Ω' });
  }
};

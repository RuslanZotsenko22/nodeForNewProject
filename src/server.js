import express from 'express';
import cors from 'cors';
import dotenv from 'dotenv';
import mongoose from 'mongoose';

// üì¶ –Ü–º–ø–æ—Ä—Ç —Ä–æ—É—Ç—ñ–≤
import testRoutes from './routes/testRoute.js';
import createRouter from './routes/createRouter.js';
import projectRoutes from './routes/projectRoutes.js';
import blogRoutes from './routes/blogRoutes.js';
import adminAuthRoutes from './routes/adminAuthRoutes.js';
import { errorHandler } from './middleware/errorHandler.js';

dotenv.config();

const app = express();
const PORT = process.env.PORT || 5000;

// üîß Middleware
app.use(cors());
app.use(express.json());

// üìå –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —â–æ —Å–µ—Ä–≤–µ—Ä –∂–∏–≤–∏–π
app.get('/api/test', (req, res) => {
  res.json({ message: '‚úÖ Server is working!' });
});

// üöè –†–æ—É—Ç–∏
app.use('/api/test', testRoutes);
app.use('/api/team', createRouter);
app.use('/api/projects', projectRoutes);
app.use('/api/blog', blogRoutes);
app.use('/api/admin', adminAuthRoutes);

// üõ† –¶–µ–Ω—Ç—Ä–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –ø–æ–º–∏–ª–æ–∫
app.use(errorHandler);

// üîå –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ MongoDB
mongoose
  .connect(process.env.MONGO_URI)
  .then(() => {
    console.log('‚úÖ MongoDB connected');
    app.listen(PORT, () => {
      console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    });
  })
  .catch((err) => {
    console.error('‚ùå MongoDB connection error:', err);
  });
